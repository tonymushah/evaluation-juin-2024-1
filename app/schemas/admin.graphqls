type AdminEtape {
	rang: Int!
	longueur: BigDecimal!
	nom: String!
	nbCoureurParEquipe: Int!
	depart: LocalDateTime!
	finished: LocalDateTime
	coureur(pagination: OffsetLimit!): EtapeCoureurResults!
}

type AdminEtapeResults {
	data: [AdminEtape!]!
	limit: Int!
	offset: Int!
	total: Int!
}

type AdminMutations {
	resetDb: Boolean!
	etape(id: Int!): EtapeMutation!
	login(password: String!): String!
	import: ImportMutations!
	logout: Boolean!
	penalite: PenaliteMuations!
}

type AdminQueries {
	hello: String!
	etape: EtapeQueries!
	penalite: PenalitesQueries!
	equipe: EquipeQueries!
}

scalar BigDecimal


type Coureur {
	numeroDosard: Int!
	nom: String!
	genre: Int!
	dtn: Date!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar Date

type Equipe {
	idEquipe: UUID!
	pseudo: String!
	nom: String!
}

type EquipeQueries {
	list(pagination: OffsetLimit!): EquipeResults!
}

type EquipeResults {
	data: [Equipe!]!
	limit: Int!
	offset: Int!
	total: Int!
}

type Etape {
	rang: Int!
	longueur: BigDecimal!
	nom: String!
	nbCoureurParEquipe: Int!
	depart: LocalDateTime!
	finished: LocalDateTime
}

type EtapeCoureur {
	temps: Int
	equipeCoureur: UUID!
	points: Int
	coureur: Coureur!
	equipe: Equipe!
}

type EtapeCoureurResults {
	data: [EtapeCoureur!]!
	limit: Int!
	offset: Int!
	total: Int!
}

type EtapeMutation {
	addTime(dosard: Int!, temps: TempsCoureur!, point: Int): TempCoureur!
}

type EtapeQueries {
	list(pagination: OffsetLimit!): AdminEtapeResults!
	unique(rang: Int!): AdminEtape!
}



type ImportMutations {
	points(file: Upload!): [Points!]!
	etapes(file: Upload!): [Etape!]!
	resultats(file: Upload!): [TempCoureur!]!
}


"""
A local datetime without timezone offset.

The input/output is a string in ISO 8601 format without timezone, including
subseconds. E.g. "2022-01-12T07:30:19.12345".
"""
scalar LocalDateTime

input OffsetLimit {
	offset: Int!
	limit: Int!
}

type Penalite {
	idPenalite: UUID!
	etape: Int!
	valeur: Int!
	equipe: UUID!
	equipeData: Equipe!
	etapeData: Etape!
}

input PenaliteInput {
	idPenalite: UUID! = "76ac2d70-636e-4efd-ac8c-69ee31cd0562"
	etape: Int!
	valeur: Int!
	equipe: UUID!
}

type PenaliteMuations {
	upsert(input: PenaliteInput!): Penalite!
	remove(id: UUID!): Penalite!
}

type PenalitesQueries {
	list(pagination: OffsetLimit! = {offset: 0, limit: 10}): PenalitesResults!
}

type PenalitesResults {
	data: [Penalite!]!
	limit: Int!
	offset: Int!
	total: Int!
}

type Points {
	rang: Int!
	valeur: Int!
}


type TempCoureur {
	idTempsCoureur: UUID!
	temps: Int
	points: Int
	equipeCoureur: UUID!
	etape: Int!
}

scalar TempsCoureur

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

scalar Upload

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: AdminQueries
	mutation: AdminMutations
}
