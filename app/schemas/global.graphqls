
type Categorie {
	idCategorie: UUID!
	designation: String!
}

type CategorieResults {
	data: [Categorie!]!
	limit: Int!
	offset: Int!
	total: Int!
}

type ClassementQueries {
	parEquipe(ordre: GraphQLOrdering, pagination: OffsetLimit! = {offset: 0, limit: 10}): EquipePointResults!
	parCoureur(ordre: GraphQLOrdering, pagination: OffsetLimit! = {offset: 0, limit: 10}): CoureurPointResults!
	parCategorie(ordre: GraphQLOrdering, pagination: OffsetLimit! = {offset: 0, limit: 10}, id: UUID!): CoureurPointResults!
}

type CoueurPoint {
	coureur: Int!
	points: Int!
	temps: Int!
}

type CoureurPointResults {
	data: [CoueurPoint!]!
	limit: Int!
	offset: Int!
	total: Int!
}

"""
ISO 8601 calendar date without timezone.
Format: %Y-%m-%d

# Examples

* `1994-11-13`
* `2000-02-24`
"""
scalar Date

type EquipePoint {
	equipe: UUID!
	points: Int!
	temps: Int!
	nom: String!
}

type EquipePointResults {
	data: [EquipePoint!]!
	limit: Int!
	offset: Int!
	total: Int!
}


type GlobalQueries {
	hello: String!
	classements: ClassementQueries!
	categories(pagination: OffsetLimit!): CategorieResults!
	getCoureur(coureur: Int!): VequipeCoureur!
}

enum GraphQLOrdering {
	ASCENDING
	DESCENDING
}



input OffsetLimit {
	offset: Int!
	limit: Int!
}


"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

type VequipeCoureur {
	coureur: Int!
	equipe: UUID!
	nomCoureur: String!
	genre: Int!
	dtn: Date!
	nomEquipe: String!
	idEquipeCoureur: UUID!
	points: Int
}

directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
schema {
	query: GlobalQueries
}
